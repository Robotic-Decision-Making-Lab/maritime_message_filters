// Copyright 2024, Evan Palmer
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#pragma once

#include <string>

#include "geometry_msgs/msg/pose.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "geometry_msgs/msg/wrench.hpp"
#include "geometry_msgs/msg/wrench_stamped.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "rclcpp/qos.hpp"
#include "rclcpp_components/register_node_macro.hpp"
#include "rclcpp_lifecycle/lifecycle_node.hpp"

// auto-generated by generate_parameter_library
#include "message_transforms_parameters.hpp"

namespace m2m::transforms
{

using CallbackReturn = rclcpp_lifecycle::node_interfaces::LifecycleNodeInterface::CallbackReturn;

class MessageTransforms : public rclcpp_lifecycle::LifecycleNode
{
public:
  explicit MessageTransforms(const rclcpp::NodeOptions & options = rclcpp::NodeOptions());

  auto on_configure(const rclcpp_lifecycle::State & state) -> CallbackReturn override;

private:
  /// Transform messages sent over a provided topic and publish them to multiple new topics.
  template <typename MessageT>
  auto register_transforms(
    const std::string & in_topic,
    const std::vector<std::string> & out_topics,
    const rclcpp::QoS & qos) -> void
  {
    // Create a publisher for each outgoing topic
    std::vector<std::shared_ptr<rclcpp::Publisher<MessageT>>> publishers;
    for (const auto & out_topic : out_topics) {
      publishers.push_back(create_publisher<MessageT>(out_topic, qos));
    }

    // Create a subscriber for the incoming topic that will transform and publish the message to the outgoing topics
    subscribers_.push_back(
      create_subscription<MessageT>(in_topic, qos, [this, publishers](const std::shared_ptr<MessageT> message) {
        transform_message(message);
        for (const auto & pub : publishers) {
          pub->publish(*message);
        }
      }));
  }

  // TODO(evan): Copy the message and transform it don't modify the original

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::Pose> & message) -> void;

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::Twist> & message) -> void;

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::Wrench> & message) -> void;

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::PoseStamped> & message) -> void;

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::TwistStamped> & message) -> void;

  auto transform_message(const std::shared_ptr<geometry_msgs::msg::WrenchStamped> & message) -> void;

  auto transform_message(const std::shared_ptr<nav_msgs::msg::Odometry> & message) -> void;

  std::vector<std::shared_ptr<rclcpp::SubscriptionBase>> subscribers_;

  std::shared_ptr<message_transforms::ParamListener> param_listener_;
  message_transforms::Params params_;

  // Keep track of the supported message transformations
  std::unordered_map<
    std::string,
    std::function<void(const std::string &, const std::vector<std::string> &, const rclcpp::QoS &)>>
    subscription_map_ = {
      {"geometry_msgs/msg/Pose",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::Pose>(in_topic, out_topics, qos);
       }},
      {"geometry_msgs/msg/Twist",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::Twist>(in_topic, out_topics, qos);
       }},
      {"geometry_msgs/msg/Wrench",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::Wrench>(in_topic, out_topics, qos);
       }},
      {"geometry_msgs/msg/PoseStamped",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::PoseStamped>(in_topic, out_topics, qos);
       }},
      {"geometry_msgs/msg/TwistStamped",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::TwistStamped>(in_topic, out_topics, qos);
       }},
      {"geometry_msgs/msg/WrenchStamped",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<geometry_msgs::msg::WrenchStamped>(in_topic, out_topics, qos);
       }},
      {"nav_msgs/msg/Odometry",
       [this](const std::string & in_topic, const std::vector<std::string> & out_topics, const rclcpp::QoS & qos) {
         register_transforms<nav_msgs::msg::Odometry>(in_topic, out_topics, qos);
       }},
    };
};

}  // namespace m2m::transforms

RCLCPP_COMPONENTS_REGISTER_NODE(m2m::transforms::MessageTransforms)
